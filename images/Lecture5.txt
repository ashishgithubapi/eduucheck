AJAX
 AJAX is a web development technique used to send and receive data in the background without refreshing the page.

 To perform Ajax communication JavaScript uses a special object built into the browser—an XMLHttpRequest (XHR) object—to make HTTP requests to the server and receive data in response.

 Since Ajax requests are usually asynchronous, execution of the script continues as soon as the Ajax request is sent, i.e. the browser will not halt the script execution until the server response comes back.

 States of AJAX:
  0 means UNOPENED.
  1 means OPENED.
  2 means HEADERS_RECEIVED.
  3 means LOADING.
  4 means DONE.


 Steps for Ajax request:
 1. Instantiate XMLHttpRequest 
  var request = new XMLHttpRequest();

 2. Open a connection 
  request.open("GET", "info.txt");
  The open() method typically accepts two parameters— the HTTP request method to use, such as "GET", "POST", etc., and the URL to send the request to

 3. Send the request to server
  request.send();

 Eg: // Creating the XMLHttpRequest object
    var request = new XMLHttpRequest();

    // Instantiating the request object
    request.open("GET", "greet.php?fname=John&lname=Clark");

    // Defining event listener for readystatechange event
    request.onreadystatechange = function() {
        // Check if the request is compete and was successful
        if(this.readyState === 4 && this.status === 200) {
            // Inserting the response from server into an HTML element
            document.getElementById("result").innerHTML = this.responseText;
        }
    };
    // Sending the request to the server
    request.send();


Javascript Timer function:
 setTimeout and setInterval are called as timer functions in JavaScript. They are used to schedule the execution of functions. They are not provided by the JS engine itself but they are provided by browser as part of the window object. Consider the window object


 ES6:
  ES (Ecmascript) is the standard governing Javascript. ES6 is the version of ecmascript draft in which a lot of features were introduced (classes, arrow functions etc).

  let and const:
   let and const are used for variable declarations in javascript based on new ES6 upgrades these are similar to var. Except, their scope level. They have a block level scope unlike var which has function level scope 

  Arrow functions:
   ES6 arrow functions provide you with an alternative way to write a shorter syntax compared to the function expression.

   Arrow functions are statistically defined. It means every non arrow functions defines it own this or context depending on their invocation.
   The context of the enclosing objects/function does not affect this tendency to automatically define their own context.

   PS: Arrow functions can not have this in them like normal non arrow function.
   Eg: function add (x, y) { //old method
        return x + y;
       }

       add()
       // using arrow function of ES6
       let add = (x, y) => x + y;
       let add = (x, y) =>{}};
       let multiply = x => x * x;
       add(10, 20)

  Classes : 
  Classes are a template for creating objects. They encapsulate data with code to work on that data.
    Eg: class Rectangle {
      constructor(height, width) {
        this.height = height;
        this.width = width;
      }
      // Getter
      getArea() {
        return this.calcArea();
      }
      // Method
      calcArea() {
        return this.height * this.width;
      }
    }

    The above code is a class so to access that class create a object of it.
    var rectangleProperties  = new Rectangle(10, 20);
 